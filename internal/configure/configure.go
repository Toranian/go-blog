package configure

import (
	"fmt"
	"os"

	"github.com/BurntSushi/toml"
)

type Config struct {
	CSSVariables CSSVariables
	MetaData     MetaData
	BlogData     BlogData
}

type MetaData struct {
	Title       string
	Description string
	Author      string
	Keywords    []string
}

type CSSVariables struct {
	// Light theme colors
	LightThemeBackground string
	LightThemeText       string
	LightThemeAccent     string
	LightThemeLink       string

	// Dark theme colors
	DarkThemeBackground string
	DarkThemeText       string
	DarkThemeAccent     string
	DarkThemeLink       string

	// Widths for the main content and expanded codeblocks
	MainContentWidth string
	CodeBlockWidth   string
}

type BlogData struct {
	// The content directory is where the markdown files are stored
	ContentDirectory string

	// The source file is the file to initially display at the route "/"
	SourceFile string

	// The static directory is where the CSS, JS, and Image files are stored
	StaticDirectory string
}

func GetConfigFromTOML() (Config, error) {
	var config Config
	if _, err := toml.DecodeFile("blog-config.toml", &config); err != nil {
		fmt.Println("Error decoding TOML file:", err)
		return Config{}, err
	}

	return config, nil
}

func GenerateSCSSVariables(vars CSSVariables) string {

	return fmt.Sprintf(`// Generated by /internal/configure/configure.go
:root {
  // Colors - Light
  --bg: %s;
  --text: %s;
  --accent: %s;
  --link: %s;

  // Colors - Dark
  --dark-bg: %s;
  --dark-text: %s;
  --dark-accent: %s;
  --dark-link: %s;

  // Widths
  --mw: %s; // Main width
  --cw: %s; // Code block width max

  --rounded: 8px;
}`, vars.LightThemeBackground, vars.LightThemeText, vars.LightThemeAccent, vars.LightThemeLink,
		vars.DarkThemeBackground, vars.DarkThemeText, vars.DarkThemeAccent, vars.DarkThemeLink,
		vars.MainContentWidth, vars.CodeBlockWidth)

}

func writeSCSSFile(filePath string, content string) error {
	return os.WriteFile(filePath, []byte(content), 0644)
}
